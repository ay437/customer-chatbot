{"ast":null,"code":"import _toConsumableArray from \"/Users/arjunyadav/Documents/Projects/chatbot/chatbot/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { ApiAiClient } from 'api-ai-javascript';\nimport { applyMiddleware, createStore } from 'redux';\nvar accessToken = '8fab0c67b2ed45c2bf2ddaccfee643c2';\nvar client = new ApiAiClient({\n  accessToken: accessToken\n});\nvar ON_MESSAGE = 'ON_MESSAGE';\nexport var sendMessage = function sendMessage(text) {\n  var sender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'user';\n  return {\n    type: ON_MESSAGE,\n    payload: {\n      text: text,\n      sender: sender\n    }\n  };\n};\n\nvar messageMiddleware = function messageMiddleware() {\n  return function (next) {\n    return function (action) {\n      next(action);\n\n      if (action.type === ON_MESSAGE) {\n        var onSuccess = function onSuccess(response) {\n          var fulfillment = response.result.fulfillment;\n          next(sendMessage(fulfillment.speech, 'bot'));\n        };\n\n        var text = action.payload.text;\n        client.textRequest(text).then(onSuccess);\n      }\n    };\n  };\n};\n\nvar initState = [{\n  text: 'Hi, how can I help you today?'\n}];\n\nvar messageReducer = function messageReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ON_MESSAGE:\n      return [].concat(_toConsumableArray(state), [action.payload]);\n\n    default:\n      return state;\n  }\n};\n\nexport var store = createStore(messageReducer, applyMiddleware(messageMiddleware));","map":{"version":3,"sources":["/Users/arjunyadav/Documents/Projects/chatbot/chatbot/src/chat.js"],"names":["ApiAiClient","applyMiddleware","createStore","accessToken","client","ON_MESSAGE","sendMessage","text","sender","type","payload","messageMiddleware","next","action","onSuccess","response","fulfillment","result","speech","textRequest","then","initState","messageReducer","state","store"],"mappings":";AAAA,SAAQA,WAAR,QAA0B,mBAA1B;AACA,SAAQC,eAAR,EAAyBC,WAAzB,QAA2C,OAA3C;AAEA,IAAMC,WAAW,GAAG,kCAApB;AACA,IAAMC,MAAM,GAAG,IAAIJ,WAAJ,CAAgB;AAACG,EAAAA,WAAW,EAAXA;AAAD,CAAhB,CAAf;AAEA,IAAME,UAAU,GAAG,YAAnB;AAEA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,IAAD;AAAA,MAAOC,MAAP,uEAAc,MAAd;AAAA,SAA0B;AACpDC,IAAAA,IAAI,EAAEJ,UAD8C;AAEpDK,IAAAA,OAAO,EAAE;AAACH,MAAAA,IAAI,EAAJA,IAAD;AAAOC,MAAAA,MAAM,EAANA;AAAP;AAF2C,GAA1B;AAAA,CAApB;;AAKP,IAAMG,iBAAiB,GAAG,SAApBA,iBAAoB;AAAA,SAAM,UAAAC,IAAI;AAAA,WAAI,UAAAC,MAAM,EAAI;AACjDD,MAAAA,IAAI,CAACC,MAAD,CAAJ;;AACA,UAAGA,MAAM,CAACJ,IAAP,KAAgBJ,UAAnB,EAA+B;AAAA,YAMrBS,SANqB,GAM9B,SAASA,SAAT,CAAmBC,QAAnB,EAA6B;AAAA,cACZC,WADY,GACKD,QADL,CACrBE,MADqB,CACZD,WADY;AAE5BJ,UAAAA,IAAI,CAACN,WAAW,CAACU,WAAW,CAACE,MAAb,EAAqB,KAArB,CAAZ,CAAJ;AACA,SAT6B;;AAAA,YACtBX,IADsB,GACbM,MAAM,CAACH,OADM,CACtBH,IADsB;AAG9BH,QAAAA,MAAM,CAACe,WAAP,CAAmBZ,IAAnB,EACEa,IADF,CACQN,SADR;AAOA;AACD,KAbmC;AAAA,GAAV;AAAA,CAA1B;;AAeA,IAAMO,SAAS,GAAG,CAAC;AAAEd,EAAAA,IAAI,EAAE;AAAR,CAAD,CAAlB;;AAEA,IAAMe,cAAc,GAAG,SAAjBA,cAAiB,GAA+B;AAAA,MAA9BC,KAA8B,uEAAtBF,SAAsB;AAAA,MAAXR,MAAW;;AACrD,UAAQA,MAAM,CAACJ,IAAf;AAEC,SAAKJ,UAAL;AACC,0CAAYkB,KAAZ,IAAmBV,MAAM,CAACH,OAA1B;;AAED;AACC,aAAOa,KAAP;AANF;AAQA,CATD;;AAWA,OAAO,IAAMC,KAAK,GAAGtB,WAAW,CAACoB,cAAD,EAAiBrB,eAAe,CAACU,iBAAD,CAAhC,CAAzB","sourcesContent":["import {ApiAiClient} from 'api-ai-javascript';\nimport {applyMiddleware, createStore} from 'redux';\n\nconst accessToken = '8fab0c67b2ed45c2bf2ddaccfee643c2';\nconst client = new ApiAiClient({accessToken})\n\nconst ON_MESSAGE = 'ON_MESSAGE';\n\nexport const sendMessage = (text, sender='user') => ({\n\ttype: ON_MESSAGE,\n\tpayload: {text, sender}\n});\n\nconst messageMiddleware = () => next => action => {\n\tnext(action);\n\tif(action.type === ON_MESSAGE) {\n\t\tconst { text } = action.payload;\n\t\t\n\t\tclient.textRequest(text)\n\t\t .then( onSuccess )\n\t\t\n\t\tfunction onSuccess(response) {\n\t\t\tconst {result: {fulfillment }} = response;\n\t\t\tnext(sendMessage(fulfillment.speech, 'bot'));\n\t\t}\n\t}\n};\n\nconst initState = [{ text: 'Hi, how can I help you today?' }];\n\nconst messageReducer = (state = initState, action) => {\n\tswitch (action.type) {\n\t\t\n\t\tcase ON_MESSAGE:\n\t\t return [ ...state, action.payload ];\n\t\t\n\t\tdefault:\n\t\t return state;\n\t}\n};\n\nexport const store = createStore(messageReducer, applyMiddleware(messageMiddleware));\n\n"]},"metadata":{},"sourceType":"module"}